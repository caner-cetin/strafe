// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	// Delete all listening history for a given anonymous user
	DeleteListeningHistoryByAnonID(ctx context.Context, anonID pgtype.Text) error
	GetAlbumByArtist(ctx context.Context, artist pgtype.Text) (Album, error)
	GetAlbumById(ctx context.Context, id string) (Album, error)
	GetAlbumByName(ctx context.Context, name pgtype.Text) (Album, error)
	GetAlbumByNameAndArtist(ctx context.Context, arg GetAlbumByNameAndArtistParams) (Album, error)
	// Get album cover by the album ID
	GetAlbumCoverByID(ctx context.Context, id string) (pgtype.Text, error)
	GetAlbumIDByName(ctx context.Context, name pgtype.Text) (string, error)
	GetAlbumIDByNameAndArtist(ctx context.Context, arg GetAlbumIDByNameAndArtistParams) (string, error)
	// Get a completely random track
	GetRandomTrack(ctx context.Context) (Track, error)
	// Get a random track that hasn't been listened to by the given anonymous user
	GetRandomUnlistenedTrack(ctx context.Context, anonID pgtype.Text) (Track, error)
	// Get track by ID (all columns, use GetTrackBasicByID if waveforms are not needed)
	GetTrackByID(ctx context.Context, id string) (Track, error)
	// Gets total number of tracks
	GetTrackCount(ctx context.Context) (int64, error)
	// Gets basic track information filtered by album ID, sorted by track list
	GetTracksByAlbumId(ctx context.Context, albumID pgtype.Text) ([]GetTracksByAlbumIdRow, error)
	// Gets basic track information filtered by artist
	GetTracksByArtist(ctx context.Context, info []byte) ([]GetTracksByArtistRow, error)
	// Gets basic track information filtered by genre
	GetTracksByGenre(ctx context.Context, info []byte) ([]GetTracksByGenreRow, error)
	// returns id
	InsertAlbum(ctx context.Context, arg InsertAlbumParams) (string, error)
	InsertTrack(ctx context.Context, arg InsertTrackParams) error
	RecordListeningHistory(ctx context.Context, arg RecordListeningHistoryParams) error
	// Searches tracks by title, artist, or genre
	SearchTracks(ctx context.Context, arg SearchTracksParams) ([]SearchTracksRow, error)
}

var _ Querier = (*Queries)(nil)
